trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'DevelopmentDeployments'

stages:
# =================================================================================
# Stage: CheckExistingResources
# This stage checks whether Microsoft Sentinel resources already exist.
# If resources are found, the Bicep deployment will be skipped in the next stage.
# =================================================================================
  - stage: CheckExistingResources
    displayName: 'Check if Sentinel Resources Exist'
    jobs:
      - job: CheckResources
        displayName: 'Verify Existing Sentinel Resources'
        steps:
          - task: AzurePowerShell@5
            displayName: 'Check for Existing Resources in Resource Group'
            name: CheckSentinelResources
            inputs:
              azureSubscription: $(azureSubscription)
              ScriptType: 'InlineScript'
              pwsh: true
              azurePowerShellVersion: LatestVersion
              Inline: |
                Write-Output "Checking if Sentinel resources already exist in Resource Group: $(RESOURCEGROUP)..."

                # Define variables
                $resourceGroupName = "$(RESOURCEGROUP)"
                $workspaceName = "$(WORKSPACENAME)"
                $resourcesExist = "false"

                # Check if the Log Analytics Workspace exists
                $law = Get-AzOperationalInsightsWorkspace -ResourceGroupName $resourceGroupName -Name $workspaceName -ErrorAction SilentlyContinue
                if ($law) {
                    Write-Output "Log Analytics Workspace ($workspaceName) found."
                    $resourcesExist = "true"
                } else {
                    Write-Output "Log Analytics Workspace ($workspaceName) not found."
                }

                # Set a pipeline variable based on resource existence
                Write-Output "Setting RESOURCES_EXIST to: $resourcesExist"
                echo "##vso[task.setvariable variable=RESOURCES_EXIST;isOutput=true]$resourcesExist"

# ========================================================================================================
# Stage: DeployBicep
# This stage deploys the Microsoft Sentinel infrastructure using a Bicep template.
# If the CheckExistingResources stage confirms that resources already exist, this stage will be skipped.
# ========================================================================================================
  - stage: DeployBicep
    displayName: 'Deploy Microsoft Sentinel Infrastructure via Bicep'
    dependsOn: CheckExistingResources
    condition: and(succeeded(), eq(dependencies.CheckExistingResources.outputs['CheckResources.CheckSentinelResources.RESOURCES_EXIST'], 'false'))
    jobs:
      - job: DeploySentinelResources
        displayName: 'Deploy Microsoft Sentinel Resources'
        steps:
          - task: AzureCLI@2
            displayName: 'Deploy Sentinel Infrastructure with Bicep Template'
            name: DeployBicepTask
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Starting Bicep Deployment..."
                az deployment sub create \
                  --location '$(REGION)' \
                  --template-file Deployment/main.bicep \
                  --parameters Deployment/main.bicepparam \
                  --parameters rgLocation='$(REGION)' rgName='$(RESOURCEGROUP)' lawName='$(WORKSPACENAME)' dailyQuota='$(DAILYQUOTA)'

# ==========================================================================================
# Stage: EnableSentinelContentHub
# This stage enables Sentinel solutions and configures alert rules.
# It will always run, regardless of whether the Bicep deployment was skipped or executed.
# ==========================================================================================
  - stage: EnableSentinelContentHub
    displayName: 'Enable Sentinel Solutions and Configure Alert Rules'
    dependsOn:
      - CheckExistingResources
      - DeployBicep
    condition: always()  # Ensures this stage runs even if DeployBicep is skipped
    jobs:
      - job: EnableContentHub
        displayName: 'Enable Sentinel Solutions and Alert Rules'
        steps:
          - task: AzurePowerShell@5
            continueOnError: true
            inputs:
              azureSubscription: $(azureSubscription)
              ScriptType: 'FilePath'
              ScriptPath: '$(Build.SourcesDirectory)/DeploymentScripts/Create-DevSentinelSolutions.ps1'
              ScriptArguments: >
                -ResourceGroup '$(RESOURCEGROUP)' 
                -Workspace '$(WORKSPACENAME)' 
                -Region '$(REGION)' 
                -Solutions $(SENTINELSOLUTIONS) 
                -SeveritiesToInclude $(ARSEVERITIES) 
                -IsGov 'false'
              azurePowerShellVersion: 'LatestVersion'
            displayName: "Sentinel Solution Deployment"
